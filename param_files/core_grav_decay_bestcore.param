#-----CLASS v2.4.4 (branch: 2.4, hash: d2f7b11b44c0cb34cd56913f4816decd5be2bbd9)-----

#------Experiments to test (separated with commas)-----

data.experiments=['core_lens_extr']
#data.experiments=['litecore120']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
#data.over_sampling=[1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list


#omega_b = 0.022256, omega_cdm = 0.11976, 100*theta_s = 1.0408, ln10^{10}A_s = 3.0943, n_s = 0.96447, tau_reio = 0.06017


data.parameters['omega_b']	= [ 2.2256,  0.,  None,  0.028, 0.01, 'cosmo']
#data.parameters['omega_dcdmdr'] = [0.11976,  0.,  None, 0.0027,    1, 'cosmo']
#data.parameters['omega_cdm'] = [0.11976,  0.,  None, 0.0027,    1, 'cosmo']
data.parameters['Gamma_dcdm']   = [  1000, 500, 10000,	   500.,    1, 'cosmo']
data.parameters['100*theta_s']  = [ 1.0408,  None,  None,   3e-4,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [ 3.0943,  None,  None, 0.0029,    1, 'cosmo']
data.parameters['n_s']          = [0.96447,  None,  None, 0.0074,    1, 'cosmo']
data.parameters['tau_reio']     = [0.06017,  0.04,  None,  0.013,    1, 'cosmo']
data.parameters['omega_totcdm']    = [0.11976,   None, None, 0.0027,    1, 'cosmo']
data.parameters['f_dcdm'] = [0.05,0.01,0.15,0.05,1,'cosmo']
#data.parameters['z_reio']	= [10,  6,  None,  1.,    1, 'cosmo']



# Grid: Cosmological parameters list
#data.parameters['M_tot']	= [      0,      0, None,   0.03,    1, 'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name

#data.parameters['A_cib_217']         = [     61,    0,  200,     7,     1,'nuisance']   

# Grid: Nuisance parameter list, same call, except the name does not have to be a class name

# Derived parameters

data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
#data.parameters['tau_reio']          = [1, None, None, 0,     1,   'derived']
#data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
#data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']

# Grid: Derived parameters
data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05
data.cosmo_arguments['omega_cdm']=0.00000001
# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611

# These two are required to get sigma8 as a derived parameter 
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

# Increase precision of cosmological parameter extraction to match CORE+ specifications
data.cosmo_arguments['tol_background_integration'] = 1.e-3
data.cosmo_arguments['tol_thermo_integration'] = 1.e-3
data.cosmo_arguments['tol_perturb_integration'] = 1.e-6
data.cosmo_arguments['reionization_optical_depth_tol'] = 1.e-5
data.cosmo_arguments['l_logstep'] = 1.08
data.cosmo_arguments['l_linstep'] = 25
data.cosmo_arguments['perturb_sampling_stepsize'] = 0.04
data.cosmo_arguments['delta_l_max'] = 1000

# Include non-linear corrections from halofit
data.cosmo_arguments['non linear'] = 'halofit'
# Choose the recombination code
data.cosmo_arguments['recombination'] = 'recfast'
#data.cosmo_arguments['tau_dcdm']= 1e20
#data.cosmo_arguments['reio_parametrization'] = 'reio_stars_and_halos'
data.cosmo_arguments['reio_parametrization'] = 'reio_camb'
#data.cosmo_arguments['reio_stars_and_dark_matter'] = 'yes'

# Grid: Other cosmo parameters (fixed parameters, precision parameters, etc.)
#data.cosmo_arguments['N_ur'] = 0
#data.cosmo_arguments['N_ncdm'] = 1
#data.cosmo_arguments['m_ncdm'] = 0.02
#data.cosmo_arguments['deg_ncdm'] = 3
#data.cosmo_arguments['T_ncdm'] = 0.71611

#------ Mcmc parameters ----

data.N=20
data.write_step=5



