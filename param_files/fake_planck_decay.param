#------Experiments to test (separated with commas)-----

#data.experiments=['Planck_highl_TTTEEE','simlow','Planck_lensing']
#data.experiments=['Planck_highl_TTTEEE','Planck_lowl','Planck_lensing']
#data.experiments=['core_lens_extr_perso']
data.experiments=['fake_planck_bluebook_perso']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
#data.over_sampling=[1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']      = [ 2.2253,   None, None,  0.028, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [0.11919,   None, None, 0.0027,    1, 'cosmo']
#data.parameters['Gamma_dcdm'] = [1.04872,0.0001,500,50,1,'cosmo']
data.parameters['100*theta_s']  = [ 1.0418,   None, None,   3e-4,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [ 3.0945,  2, 4, 0.0029,    1, 'cosmo']
data.parameters['n_s']          = [0.9645,   0.8, 1.2, 0.0074,    1, 'cosmo']
data.parameters['z_reio']     = [10,   5, 13,  2,    1, 'cosmo']
#data.parameters['tau_reio']     = [0.09463,   0.04, None,  0.013,    1, 'cosmo']

#data.parameters['decay']	= [1.,0.,None,1,1e-4,'cosmo']
#data.parameters['tau_dcdm']	= [1e5,0.,None,10,1e15,'cosmo']
data.parameters['PBH_fraction'] = [10,0,100,10,1e-2,'cosmo']
data.parameters['PBH_low_mass'] = [10,1,50,5,1e15,'cosmo']



# Derived parameters

data.parameters['tau_reio']          = [1, None, None, 0,     1,   'derived']
#data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05
#data.cosmo_arguments['omega_cdm']=0.1198
#data.cosmo_arguments['omega_b']=0.02225
#data.cosmo_arguments['100*theta_s']=1.04077
#data.cosmo_arguments['decay']=1e-7


# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611
#parameter related to decaying dark matter
#data.cosmo_arguments['tau_dcdm']= 1e15
data.cosmo_arguments['reio_parametrization'] = 'reio_camb'
data.cosmo_arguments['reio_stars_and_dark_matter'] = 'yes'
#data.cosmo_arguments['recombination']='hyrec'
data.cosmo_arguments['on the spot'] = 'yes'
#data.cosmo_arguments['annihilation f_eff file'] = data.path['cosmo']+'/DM_decay_files/f_z_decay_ee_tau_1e15s_M_1e11eV.dat'

#data.cosmo_arguments['input_verbose'] = 10
#data.cosmo_arguments['background_verbose'] = 10
#data.cosmo_arguments['thermodynamics_verbose'] = 10
#data.cosmo_arguments['perturbations_verbose'] = 10
#data.cosmo_arguments['transfer_verbose'] = 1
#data.cosmo_arguments['primordial_verbose'] = 10
#data.cosmo_arguments['spectra_verbose'] = 10
#data.cosmo_arguments['nonlinear_verbose'] = 10
#data.cosmo_arguments['lensing_verbose'] = 10
#data.cosmo_arguments['output_verbose'] = 10
#data.cosmo_arguments['energy_repartition_functions'] = 'SSCK'
# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.
data.cosmo_arguments['non linear']= 'halofit'
#------ Mcmc parameters ----

data.N=20
data.write_step=5
