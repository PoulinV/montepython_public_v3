#-----CLASS v2.4.5 (branch: , hash: )-----

#-----CLASS v2.4.5 (branch: 2.4, hash: 7dc4bd787e70f3cd78f57817a6e9f06644fe5e36)-----

#data.experiments=['Planck_SZ','CFHTLens','hst_riess_2016']
#data.experiments=['omega_b_BBN_C16','bao_lya']
data.experiments=['omega_b_BBN_C17_theo','DES1']
#data.experiments=['Planck_highl','Planck_lowl','Planck_lensing','Planck_SZ','bao_boss','WiggleZ','bao_boss_aniso']
#data.experiments=['Planck_highl','Planck_lowl','Planck_lensing']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the
# derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']      = [ 2.2253,  0.,  None,  0.028, 0.01, 'cosmo']
#data.parameters['Omega_cdm'] = [0.4,0.1,0.6,0.1,1,'cosmo']
data.parameters['omega_cdm'] 	= [0.114,  0.,	None, 0.1,1, 'cosmo']
data.parameters['H0'] = [80,40,None,20,1,'cosmo'] 

# Nuisance parameter list, same call, except the name does not have to be a
  class name

#data.parameters['A_cib_217']         = [ 64.173,    0,  200,   6.8,    1,'nuisance']
#data.parameters['cib_index']         = [   -1.3, -1.3, -1.3,     0,    1,'nuisance']
#data.parameters['xi_sz_cib']         = [0.47384,    0,    1,   0.3,    1,'nuisance']
#data.parameters['A_sz']              = [ 8.6536,    0,   10,   1.7,    1,'nuisance']
#data.parameters['ps_A_100_100']      = [ 223.31,    0,  400,    30,    1,'nuisance']
#data.parameters['ps_A_143_143']      = [ 25.988,    0,  400,    10,    1,'nuisance']
#data.parameters['ps_A_143_217']      = [ 33.580,    0,  400,    11,    1,'nuisance']
#data.parameters['ps_A_217_217']      = [ 88.265,    0,  400,    11,    1,'nuisance']
#data.parameters['ksz_norm']          = [ 9.6073,    0,   10,   2.5,    1,'nuisance']
#data.parameters['gal545_A_100']      = [ 6.1692,    0,   50,   1.9,    1,'nuisance']
#data.parameters['gal545_A_143']      = [ 8.6539,    0,   50,   1.9,    1,'nuisance']
#data.parameters['gal545_A_143_217']  = [ 17.237,    0,  100,   4.2,    1,'nuisance']
#data.parameters['gal545_A_217']      = [ 78.898,    0,  400,   7.5,    1,'nuisance']
#data.parameters['calib_100T']        = [ 998.16,    0, 3000,  0.79,0.001,'nuisance']
#data.parameters['calib_217T']        = [ 994.84,    0, 3000,   1.5,0.001,'nuisance']
#data.parameters['A_planck']          = [100.022,   90,  110,  0.25, 0.01,'nuisance']

# Derived parameters

#data.parameters['tau_reio']        = [1,-1,-1, 0,     1,   'derived']
#data.parameters['z_reio']          = [1,-1,-1, 0,     1,   'derived']
#data.parameters['Omega_Lambda']    = [1,-1,-1, 0,     1,   'derived']
#data.parameters['YHe']             = [1,-1,-1, 0,     1,   'derived']
#data.parameters['h']              = [1,-1,-1, 0,     1,   'derived']
#data.parameters['A_s']             = [1,-1,-1, 0,     1,   'derived']
#data.parameters['sigma8']          = [1,-1,-1, 0,     1,   'derived']
data.parameters['Omega_m']          = [1,-1,-1, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

#data.cosmo_arguments['k_pivot'] = 0.05
#data.cosmo_arguments['omega_cdm'] = 0.001

data.cosmo_arguments['ln10^{10}A_s']=3.056
data.cosmo_arguments['n_s'] = 0.9619
data.cosmo_arguments['tau_reio']=0.059
#data.cosmo_arguments['omega_b'] = 0.0225

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that these
# three species contribute equally
# to the radiation density at large
# redshift, with a total of Neff=3.046
data.cosmo_arguments['N_eff'] = 2.03351
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.715985

# These two are required to get sigma8 as a derived parameter 
# (class must compute the P(k) until sufficient k)
#data.cosmo_arguments['output'] = 'mPk'
#data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

#------ Mcmc parameters ----

data.N=20
data.write_step=5

