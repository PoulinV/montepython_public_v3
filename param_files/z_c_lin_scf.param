#------Experiments to test (separated with commas)-----

data.experiments=['Planck_highl_TTTEEE_lite','Planck_lowl','Planck_lensing','SH0ES_18']
#'Planck_highl_TTTEEE','Planck_lowl','Planck_lensing','Pantheon','bao_boss','bao_fs_boss_dr12','SH0ES_18'] 
#,'sdss_lrgDR7','kids450_qe_likelihood_public']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list


# Non NS runs don't require parameter bounds 
#data.parameters['omega_b']      = [ 2.2253,   None, None,  0.028, 0.01, 'cosmo']
#data.parameters['omega_cdm']    = [0.12119,   None, None, 0.0027,    1, 'cosmo']
##data.parameters['100*theta_s']  = [ 1.0418,   None, None,   3e-4,    1, 'cosmo']
#data.parameters['H0']           = [73.24,     None, None,      1,    1, 'cosmo']
#data.parameters['ln10^{10}A_s'] = [ 3.0753,   None, None, 0.0029,    1, 'cosmo']
#data.parameters['n_s']          = [0.96229,   None, None, 0.0074,    1, 'cosmo']
#data.parameters['tau_reio']     = [0.09463,   0.04, None,  0.013,    1, 'cosmo']

data.parameters['scf_parameters__1']    = [  3.5,   3.,    4.,  0.1,    1, 'cosmo']
data.parameters['scf_parameters__2']    = [ 1e-9, 1e-9, 1e-9,   0.,    1, 'cosmo']
data.parameters['scf_parameters__3']    = [ 0.0035,   0.,  0.2, 5e-4,    1, 'cosmo']
data.parameters['scf_parameters__4']    = [   0.,   0.,   0.,   0.,    1, 'cosmo']

# log10_z_c, epsilon, f_ede, phi_prime_ini
# # 3.,1e-5,0.07,0.

# The parameters below are for MultiNest. It requires finite ranges for parameters 

data.parameters['omega_b']              = [0.022253,   0.01,   0.03, 0.00028,     1, 'cosmo']
data.parameters['omega_cdm']            = [ 0.11919,    0.1,   0.13,  0.0027,     1, 'cosmo']
#data.parameters['100*theta_s']          = [  1.0418, 1.0402, 1.0437,    3e-4,     1, 'cosmo']
data.parameters['H0']           	    = [   73.24,   60.0,   80.0,       1,     1, 'cosmo']
data.parameters['ln10^{10}A_s']         = [  3.0753,   2.98,   3.18,  0.0029,     1, 'cosmo']
data.parameters['n_s']                  = [ 0.96229,    0.9,    1.1,  0.0074,     1, 'cosmo']
data.parameters['tau_reio']             = [ 0.09463,   0.02,   0.13,   0.013,     1, 'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name

data.parameters['A_planck']          = [100.028,   90,  110,  0.25,  0.01,'nuisance']  

# Derived parameters

data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
#data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
data.parameters['100*theta_s']     = [1, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['Omega_m']         = [0, None, None, 0,     1,   'derived']

data.parameters['log10_z_c']		   = [0, None, None, 0,     1,   'derived']
data.parameters['f_ede']           = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611

# EDE prameters 
data.cosmo_arguments['attractor_ic_scf'] = 'no'
data.cosmo_arguments['scf_parametrization'] = 'z_c_f_ede'
data.cosmo_arguments['do_shooting'] = 'no'
data.cosmo_arguments['Omega_scf'] = 1e-10
data.cosmo_arguments['Omega_fld'] = 0


# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

#------ Mcmc parameters ----

data.N=10
data.write_step=5
