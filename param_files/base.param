#------Experiments to test (separated with commas)-----

########################### WARNING ####################################
# This file was showing how to run the base model with Planck 2013 data.
# We leave this file for reference.
# But please use the file base2015.param for Planck 2015! 
# The nuisance parameter names and priors have changed!
########################################################################

data.experiments=['Planck_highl','Planck_lowl','lowlike']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']   = [2.2253,   None, None, 0.028,  0.01,   'cosmo']
data.parameters['omega_cdm'] = [0.11919,  None, None, 0.0027,    1,   'cosmo']
data.parameters['H0']        = [67.802,   None, None, 1.2,       1,   'cosmo']
data.parameters['A_s']       = [2.2177,      0, None, 0.055, 1.e-9,   'cosmo']
data.parameters['n_s']       = [0.96229,     0, None, 0.0074,    1,   'cosmo']
data.parameters['tau_reio']  = [0.09463,     0, None, 0.013,     1,   'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name

data.parameters['A_ps_100']  = [145.83,  0,    None,      61, 1, 'nuisance']
data.parameters['A_ps_143']  = [49.578,  0,    None,      14, 1, 'nuisance']
data.parameters['A_ps_217']  = [121.36,  0,    None,      16, 1, 'nuisance']
data.parameters['A_cib_143'] = [4.3922,  0,    20,       5.4, 1, 'nuisance']
data.parameters['A_cib_217'] = [24.869,  0,    None,     7.1, 1, 'nuisance']
data.parameters['A_sz']      = [9.7748,  0,    10,       2.3, 1, 'nuisance']
data.parameters['r_ps']      = [0.92873, 0,    1,      0.074, 1, 'nuisance']
data.parameters['r_cib']     = [0.37566, 0,    1,       0.22, 1, 'nuisance']
data.parameters['n_Dl_cib']  = [0.53809, 0,    2,        .12, 1, 'nuisance']
data.parameters['cal_100']   = [1.0006,  0,    None, 0.00041, 1, 'nuisance']
data.parameters['cal_217']   = [0.99632, 0,    None,  0.0014, 1, 'nuisance']
data.parameters['xi_sz_cib'] = [0.20243, 0,    1,       0.34, 1, 'nuisance']
data.parameters['A_ksz']     = [1.5184,  0,    10,       3.4, 1, 'nuisance']
data.parameters['Bm_1_1']    = [1.1028,  None, None,    0.59, 1, 'nuisance']

# Derived parameters

data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
data.parameters['ln10^{10}A_s']    = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that these
# three species contribute equally
# to the radiation density at large
# redshift, with a total of Neff=3.046
data.cosmo_arguments['N_eff'] = 2.03351
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.715985

# This settings is to get the same
# (arbitrary) reionization width as in CAMB
data.cosmo_arguments['reionization_width']=0.5

#------ Mcmc parameters ----

data.N=20
data.write_step=5
